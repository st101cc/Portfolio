// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Author: SketchyBot (https://sketchfab.com/SketchyB0t_3D_Fabrication)
// License: SKETCHFAB Standard (https://sketchfab.com/licenses)
// Source: https://sketchfab.com/3d-models/old-computer-bf6636fcc0954752bc9ffb5cec581b7f
// Title: Old Computer
// */

// import React, { useEffect, useRef } from 'react'
// import { useGLTF, useAnimations, useTexture } from '@react-three/drei'
// import { useGSAP } from '@gsap/react'
// import gsap from 'gsap'

// const DemoComputer = (props) => {
//     const group = useRef()
//     const { nodes, materials } = useGLTF('/models/old-computer.glb')

//     const txt = useTexture(props.texture ? props.texture : '/textures/project/project1.mp4')

//     useEffect( () => {
//         if (txt) {
//             txt.flipY = false;
//         }
//     }, [txt])

//     useGSAP( ()=> {
//         gsap.from(group.current.rotation, {
//             y: Math.PI /2,
//             duration: 1,
//             ease: 'power3.out',
//         })
//     }, [txt])

//   return (
//     <group ref={group} {...props} dispose={null}>
//       <group scale={0.005}>
//         <group position={[0, -100, 175]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube003_Keyboard_0.geometry}
//             material={materials.Keyboard}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube003_Mouse_0.geometry}
//             material={materials.Mouse}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube003_Tower_0.geometry}
//             material={materials.Tower}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube003_Monitor_0.geometry}
//             material={materials.Monitor}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube003_Screen_0.geometry}
//             material={materials.Screen}
//           >
//             <meshBasicMaterial map={txt} />
//           </mesh>
//         </group>
//       </group>
//     </group>
//   )
// }

// useGLTF.preload('/models/old-computer.glb')

// export default DemoComputer;


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Logotyp (https://sketchfab.com/Logotyp)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/arcade-machine-a914bf3651e3496ea708dc0782eca212
Title: arcade machine
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, useTexture } from '@react-three/drei'
import { useGSAP } from '@gsap/react'
import gsap from 'gsap'

const DemoComputer = (props) => {
  const group = useRef()
    const { nodes, materials } = useGLTF('/models/arcade_machine.glb')

    const txt = useTexture(props.texture ? props.texture : '/textures/project/project1.png')

    useEffect( () => {
        if (txt) {
            txt.flipY = false;
        }
    }, [txt])

    useGSAP( ()=> {
        gsap.from(group.current.rotation, {
            y: Math.PI /2,
            duration: 1,
            ease: 'power3.out',
        })
    }, [txt])

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[-0.5, 0, -0.513]} rotation={[-Math.PI / 2, 0, -0.41]} scale={0.38}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials.initialShadingGroup}
          
        >
        <meshBasicMaterial map={txt} />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.lambert3SG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.lambert5SG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.lambert6SG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials.lambert7SG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials.lambert8SG}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/models/arcade_machine.glb')

export default DemoComputer
